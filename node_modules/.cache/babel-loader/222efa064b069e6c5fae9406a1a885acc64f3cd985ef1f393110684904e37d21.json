{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n// import { createStore } from \"redux\";\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: false\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    incrementby5(state) {\n      state.counter += 5;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\ncreateSlice({\n  name: \"authentication\",\n  initialState: initialAuthState\n});\n\n// const counterReducer = (state = initialState, action) => {\n// if we have big application so that there have more and more state to manage in your application then some problem will identify in this method. the 1st problem is this action types. these identifiers, if you dispatch action, you have to make sure that you don't mistype the identifier here otherwise it won't be handled by the reducre\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 2,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 2,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"incrementby5\") {\n//     return {\n//       counter: state.counter + 5,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(counterSlice.reducer);\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nconsole.log(\"initial state - \", store.getState());\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","incrementby5","toggleCounter","initialAuthState","isAuthenticated","store","reducer","counterActions","actions","console","log","getState"],"sources":["C:/Users/Admin/Desktop/Vs Files/1stProject/Redux_counter/src/components/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n// import { createStore } from \"redux\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: false };\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    incrementby5(state) {\r\n      state.counter += 5;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst initialAuthState = {\r\n  isAuthenticated: false,\r\n};\r\n\r\ncreateSlice({\r\n  name: \"authentication\",\r\n  initialState: initialAuthState,\r\n});\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n// if we have big application so that there have more and more state to manage in your application then some problem will identify in this method. the 1st problem is this action types. these identifiers, if you dispatch action, you have to make sure that you don't mistype the identifier here otherwise it won't be handled by the reducre\r\n//   if (action.type === \"increment\") {\r\n//     return {\r\n//       counter: state.counter + 2,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"decrement\") {\r\n//     return {\r\n//       counter: state.counter - 2,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"incrementby5\") {\r\n//     return {\r\n//       counter: state.counter + 5,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       showCounter: !state.showCounter,\r\n//       counter: state.counter,\r\n//     };\r\n//   }\r\n\r\n//   return state;\r\n// };\r\n\r\n// const store = createStore(counterSlice.reducer);\r\n\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer,\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nconsole.log(\"initial state - \", store.getState());\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D;;AAEA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC;AAC9D,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,YAAYA,CAACF,KAAK,EAAE;MAClBA,KAAK,CAACP,OAAO,IAAI,CAAC;IACpB,CAAC;IACDU,aAAaA,CAACH,KAAK,EAAE;MACnBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMU,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AAEDd,WAAW,CAAC;EACVK,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAEO;AAChB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,MAAME,KAAK,GAAGhB,cAAc,CAAC;EAC3BiB,OAAO,EAAEZ,YAAY,CAACY;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGb,YAAY,CAACc,OAAO;AAClDC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEL,KAAK,CAACM,QAAQ,CAAC,CAAC,CAAC;AACjD,eAAeN,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}